using System.Net.Http;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using LangaugeCode.Core;
using LangaugeCode.Core.Models;

namespace LangaugeCode.Generator
{
    // [Generator]
    public class ISOGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            var extractor = new ISOExtractor(new HttpClient());
            var descriptors = extractor.ExtractAsync().GetResult();

            var className = "ISOGeneratorResources";

            var sourceBuilder = new StringBuilder();

            sourceBuilder.AppendLine($@"
            var result = new List<BaseUnicodeDescriptor>();
            ");

            foreach (var descriptor in descriptors)
            {
                /*if (descriptor is SingleUnicodeDescriptor singleUnicodeDescriptor)
                {
                    sourceBuilder.AppendLine($@"
                    result.Add(new SingleUnicodeDescriptor
                    {{
                        Value = ""{singleUnicodeDescriptor.Value.ToLiteral()}"",
                        Type = ""{singleUnicodeDescriptor.Type.ToLiteral()}"",
                        Description = ""{singleUnicodeDescriptor.Description.ToLiteral()}"",
                        Comment = ""{singleUnicodeDescriptor.Comment.ToLiteral()}"",
                    }});
                    ");
                }*/
            }

            sourceBuilder.AppendLine($@"
            return result;
            ");

            var code = $@"
// <auto-generated/>
using System;
using System.Collections.Generic;
using LangaugeCode.Core;
using LangaugeCode.Core.Models;

namespace {nameof(LangaugeCode)}
{{
    public static class {className}
    {{
        public static IEnumerable<BaseUnicodeDescriptor> GetEmoji() 
        {{
            {sourceBuilder}
        }}
    }}
}}
            ";

            context.AddSource($"{className}.g.cs", SourceText.From(code, Encoding.UTF8));
        }

        public void Initialize(GeneratorInitializationContext context)
        {
        }


    }
}
