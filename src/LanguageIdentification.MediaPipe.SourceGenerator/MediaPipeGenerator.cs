using System.Net.Http;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Panlingo.LanguageIdentification.MediaPipe.SourceGenerator
{
    [Generator]
    public class MediaPipeGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
        }

        public void Execute(GeneratorExecutionContext context)
        {
            var modelUrl = "https://storage.googleapis.com/mediapipe-models/language_detector/language_detector/float32/1/language_detector.tflite";
            var httpClient = new HttpClient();
            var modelDataResponse = httpClient.GetByteArrayAsync(modelUrl);
            modelDataResponse.Wait();
            var modelData = modelDataResponse.Result;
            var modelDataString = Base64Encode(modelData);

            var className = $"{nameof(MediaPipe)}ResourceProvider";
            var sourceBuilder = new StringBuilder();

            sourceBuilder.AppendLine($@"
            byte[] bytes = Base64Decode(""{modelDataString}"");
            DefaultModel = bytes;
            ");

            var code = $@"
// <auto-generated/>
using System;
using System.Collections.Generic;

namespace {nameof(Panlingo)}.{nameof(LanguageIdentification)}.{nameof(MediaPipe)}
{{
    public static class {className}
    {{
        public static readonly byte[] DefaultModel;

        static {className}()
        {{
            {sourceBuilder}
        }}

        static byte[] Base64Decode(string base64EncodedData) 
        {{
            var result = System.Convert.FromBase64String(base64EncodedData);
            return result;
        }}
    }}
}}
            ";

            context.AddSource($"{className}.g.cs", SourceText.From(code, Encoding.UTF8));
        }

        public static string Base64Encode(byte[] bytes)
        {
            return System.Convert.ToBase64String(bytes);
        }
    }
}
