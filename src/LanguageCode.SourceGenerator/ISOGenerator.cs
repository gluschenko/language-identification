using System.IO;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Panlingo.LanguageCode.SourceGenerator
{
    [Generator]
    public class ISOGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
        }

        public void Execute(GeneratorExecutionContext context)
        {
            var className = $"{nameof(ISOGenerator)}Resources";
            var sourceBuilder = new StringBuilder();

            var json = File.ReadAllText("resources.json");

            var code = $@"
// <auto-generated/>
using System;
using System.Collections.Generic;
using Panlingo.LanguageCode.Core;
using Panlingo.LanguageCode.Core.Models;

namespace {nameof(Panlingo)}.{nameof(LanguageCode)}
{{
    public static class {className}
    {{
        public static readonly IEnumerable<{nameof(SetTwoLanguageDescriptor)}> {nameof(SetTwoLanguageDescriptor)}List;
        public static readonly IEnumerable<{nameof(SetThreeLanguageDescriptor)}> {nameof(SetThreeLanguageDescriptor)}List;
        public static readonly IEnumerable<{nameof(SetTwoLanguageDeprecationDescriptor)}> {nameof(SetTwoLanguageDeprecationDescriptor)}List;

        static {className}()
        {{
            {sourceBuilder}
        }}
    }}
}}
            ";

            context.AddSource($"{className}.g.cs", SourceText.From(code, Encoding.UTF8));
        }
    }
}
